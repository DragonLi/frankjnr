--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y
data Zero =     -- empty type

on : X -> {X -> Y} -> Y
on x f = f x

if : Bool -> {X} -> {X} -> X
if b t e = on b { true  -> t!
                | false -> e! }

append : List X -> List X -> List X
append []        ys = ys
append (x :: xs) ys = x :: (append xs ys)

concat : List (List X) -> List X
concat []          = []
concat (xs :: xss) = append xs (concat xss)

interface Abort = aborting : Zero

abort : [Abort]X
abort! = case aborting! {}

data Bool = true | false

interface Choice = choice : Bool
--- end of standard stuff ---


-- nondetGreeting: {[MChoice String]String}
-- nondetGreeting! = choose {"Morning!"} {"Night!"}

-- interface MonoChoice X = choose : {X} -> {X} -> X
--
-- pickLeft: {<MonoChoice Y>X -> X}
-- pickLeft <choose a b -> k> = pickLeft (k (a unit))
-- pickLeft a = a

interface IntChoice [F] = choose : {[F|IntChoice [F]]Int} -> {[F|IntChoice [F]]Int} -> Int

alwaysPickLeft: {<IntChoice [E|]>String -> [E|]String}
alwaysPickLeft <choose a b -> k> = alwaysPickLeft (k a!)
alwaysPickLeft a                 = a

nondetGreeting: {[G|IntChoice [G|]]String}
nondetGreeting! = "Good morning"

main: {[E|]String}
main! = alwaysPickLeft nondetGreeting!
